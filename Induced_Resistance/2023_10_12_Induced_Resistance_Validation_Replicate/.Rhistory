# Make breaks = 0.05
calc_break_NGFR = ceiling(max(temp_df$NGFR_mednorm))/.05
breaks_NGFR<-seq(0,calc_break_NGFR,by=1)*ceiling(max(temp_df$NGFR_mednorm))/calc_break_NGFR   #chosen to get binwidth ~ 0.05
binwidth_NGFR<-breaks_NGFR[2]
calc_break_EGFR = ceiling(max(temp_df$EGFR_mednorm))/.05
breaks_EGFR<-seq(0,calc_break_EGFR,by=1)*ceiling(max(temp_df$EGFR_mednorm))/calc_break_EGFR   #chosen to get binwidth ~ 0.05
binwidth_EGFR<-breaks_EGFR[2]
# Get the counts
counts_oneGauss_NGFR<-length(temp_df$log_NGFR_mednorm)*oneGauss_NGFR*binwidth_NGFR
counts_twoGauss_NGFR<-length(temp_df$log_NGFR_mednorm)*twoGauss_NGFR*binwidth_NGFR
counts_twoGauss_first_NGFR<-length(temp_df$log_NGFR_mednorm)*twoGauss_first_NGFR*binwidth_NGFR
counts_twoGauss_second_NGFR<-length(temp_df$log_NGFR_mednorm)*twoGauss_second_NGFR*binwidth_NGFR
counts_oneGauss_EGFR<-length(temp_df$log_EGFR_mednorm)*oneGauss_EGFR*binwidth_EGFR
counts_twoGauss_EGFR<-length(temp_df$log_EGFR_mednorm)*twoGauss_EGFR*binwidth_EGFR
counts_twoGauss_first_EGFR<-length(temp_df$log_EGFR_mednorm)*twoGauss_first_EGFR*binwidth_EGFR
counts_twoGauss_second_EGFR<-length(temp_df$log_EGFR_mednorm)*twoGauss_second_EGFR*binwidth_EGFR
# Get 99th percentile of TwoGauss because fit is signficantly better
percentile_cutoff_first_NGFR <- exp(2*sqrt(fit2_NGFR$parameters$variance$sigmasq[1])+fit2_NGFR$parameters$mean[1])
percentile_cutoff_first_EGFR <- exp(2*sqrt(fit2_EGFR$parameters$variance$sigmasq[1])+fit2_EGFR$parameters$mean[1])
# Plot the data with cutoffs
pdf(paste0('/Users/dylanschaff/Library/CloudStorage/GoogleDrive-dyschaff@sydshafferlab.com/My Drive/Schaff_Shared/Cloud/Experiment_IDs/DLS071/output_plots/gaussin_per_well/',z,'_',q,'_mednorm_gaussian_fits.pdf'))
hist_func_NGFR<-hist(temp_df$NGFR_mednorm,breaks=breaks_NGFR,freq=TRUE,xlim=c(0,3),ylim=c(0,9000))
lines(solveat_NGFR,counts_twoGauss_first_NGFR, col = 'red')
lines(solveat_NGFR,counts_twoGauss_second_NGFR, col = 'blue')
lines(solveat_NGFR,counts_oneGauss_NGFR, col = 'magenta')
abline(v = percentile_cutoff_first_NGFR, col = 'green')
hist_func_EGFR<-hist(temp_df$EGFR_mednorm,breaks=breaks_EGFR,freq=TRUE,xlim=c(0,3),ylim=c(0,5000))
lines(solveat_EGFR,counts_twoGauss_first_EGFR, col = 'red')
lines(solveat_EGFR,counts_twoGauss_second_EGFR, col = 'blue')
lines(solveat_EGFR,counts_oneGauss_EGFR, col = 'magenta')
abline(v = percentile_cutoff_first_EGFR, col = 'green')
dev.off()
#Sum of squared errors to assess fit of 1 Gaussian vs 2 Gaussian models
Gausscomp_final_NGFR<-data.frame(hist_func_NGFR$counts)
colnames(Gausscomp_final_NGFR)<-"Histtemp_df"
Gausscomp_final_NGFR<-cbind(midpoints=hist_func_NGFR$mids,Gausscomp_final_NGFR)
tol<-1e-4 #find closest x value to midpoint defined by histogram temp_df using this tolerance
i<-1
for (val in Gausscomp_final_NGFR$midpoints){
Gausscomp_final_NGFR$oneGauss[i]<-counts_oneGauss_NGFR[which(solveat_NGFR>val-tol & solveat_NGFR<val+tol)]
Gausscomp_final_NGFR$twoGauss[i]<-counts_twoGauss_NGFR[which(solveat_NGFR>val-tol & solveat_NGFR<val+tol)]
i<-i+1
}
Gausscomp_final_EGFR<-data.frame(hist_func_EGFR$counts)
colnames(Gausscomp_final_EGFR)<-"Histtemp_df"
Gausscomp_final_EGFR<-cbind(midpoints=hist_func_EGFR$mids,Gausscomp_final_EGFR)
tol<-1e-4 #find closest x value to midpoint defined by histogram temp_df using this tolerance
i<-1
for (val in Gausscomp_final_EGFR$midpoints){
Gausscomp_final_EGFR$oneGauss[i]<-counts_oneGauss_EGFR[which(solveat_EGFR>val-tol & solveat_EGFR<val+tol)]
Gausscomp_final_EGFR$twoGauss[i]<-counts_twoGauss_EGFR[which(solveat_EGFR>val-tol & solveat_EGFR<val+tol)]
i<-i+1
}
#Calculate errors
Gausscomp_final_NGFR$oneGauss_error<-Gausscomp_final_NGFR$oneGauss - Gausscomp_final_NGFR$Histtemp_df
Gausscomp_final_NGFR$twoGauss_error<-Gausscomp_final_NGFR$twoGauss - Gausscomp_final_NGFR$Histtemp_df
Gausscomp_final_EGFR$oneGauss_error<-Gausscomp_final_EGFR$oneGauss - Gausscomp_final_EGFR$Histtemp_df
Gausscomp_final_EGFR$twoGauss_error<-Gausscomp_final_EGFR$twoGauss - Gausscomp_final_EGFR$Histtemp_df
#Sum of squared errors
Gausscomp_final_NGFR$oneGauss_error_sq<-Gausscomp_final_NGFR$oneGauss_error^2
Gausscomp_final_NGFR$twoGauss_error_sq<-Gausscomp_final_NGFR$twoGauss_error^2
counts_oneGauss_SSE_NGFR<-sum(Gausscomp_final_NGFR$oneGauss_error_sq)
counts_twoGauss_SSE_NGFR<-sum(Gausscomp_final_NGFR$twoGauss_error_sq)
Gausscomp_final_EGFR$oneGauss_error_sq<-Gausscomp_final_EGFR$oneGauss_error^2
Gausscomp_final_EGFR$twoGauss_error_sq<-Gausscomp_final_EGFR$twoGauss_error^2
counts_oneGauss_SSE_EGFR<-sum(Gausscomp_final_EGFR$oneGauss_error_sq)
counts_twoGauss_SSE_EGFR<-sum(Gausscomp_final_EGFR$twoGauss_error_sq)
#F stat
fstat_NGFR<-(counts_twoGauss_SSE_NGFR/(length(Gausscomp_final_NGFR$midpoints)-5-1))/(counts_oneGauss_SSE_NGFR/(length(Gausscomp_final_NGFR$midpoints)-2-1))
fstat_EGFR<-(counts_twoGauss_SSE_EGFR/(length(Gausscomp_final_EGFR$midpoints)-5-1))/(counts_oneGauss_SSE_EGFR/(length(Gausscomp_final_EGFR$midpoints)-2-1))
# Calculating P value based F stat and degrees of freedom
pval_NGFR <- pf(fstat_NGFR, (length(Gausscomp_final_NGFR$midpoints)-5-1),length(Gausscomp_final_NGFR$midpoints)-2-1, lower.tail = T)
pval_EGFR <- pf(fstat_EGFR, (length(Gausscomp_final_EGFR$midpoints)-5-1),length(Gausscomp_final_EGFR$midpoints)-2-1, lower.tail = T)
# Assign cells as EGFR or NGFR high
temp_df$EGFR_NGFR_status <- rep("EGFR_NGFR_low", NROW(temp_df))
temp_df$EGFR_NGFR_status[temp_df$NGFR_mednorm > percentile_cutoff_first_NGFR & temp_df$EGFR_mednorm <= percentile_cutoff_first_NGFR] <- 'NGFR-high'
temp_df$EGFR_NGFR_status[temp_df$NGFR_mednorm <= percentile_cutoff_first_NGFR & temp_df$EGFR_mednorm > percentile_cutoff_first_NGFR] <- 'EGFR-high'
temp_df$EGFR_NGFR_status[temp_df$NGFR_mednorm > percentile_cutoff_first_NGFR & temp_df$EGFR_mednorm > percentile_cutoff_first_NGFR] <- 'EGFR_NGFR-high'
pvals_NGFR <- c(pvals_NGFR,pval_NGFR)
pvals_EGFR <- c(pvals_EGFR,pval_EGFR)
data_list[[z]][[q]] <- temp_df
}
}
data_unlisted <- unlist(data_list, recursive = FALSE)
data_new <- do.call("rbind", data_unlisted)
ggplot(data_new, aes(x = EGFR_mednorm, y = NGFR_mednorm, color = EGFR_NGFR_status)) + geom_point() + labs(title = 'all_data')
stats_individual <- as.data.frame(table(data_new$EGFR_NGFR_status, data_new$plate))
View(stats_individual)
table(data_new$EGFR_NGFR_status, data_new$plate)
# Normalize expression to median per image
data_list <- list()
for (q in unique(data_filt$plate)){
print(q)
data_list[[q]] <- list()
for (z in unique(data_filt$well)){
print(z)
temp_df <- data_filt[data_filt$plate == q & data_filt$well == z,]
# Normalize expression to median
temp_df$NGFR_mednorm <- temp_df$Mean_647/median(temp_df$Mean_647)
temp_df$EGFR_mednorm <- temp_df$Mean_488/median(temp_df$Mean_488)
data_list[[q]][[z]] <- temp_df
}
}
data_unlisted <- unlist(data_list, recursive = FALSE)
data_filt <- do.call("rbind", data_unlisted)
# Calculate the ratio of normalized NGFR ot EGFR expression
data_filt$ratio_norm_NGFRtoEGFR <- data_filt$NGFR_mednorm/data_filt$EGFR_mednorm
hist(data_filt$ratio_norm_NGFRtoEGFR,51)
hist(log2(data_filt$ratio_norm_NGFRtoEGFR),51)
data_filt$NGFR_EGFR_class <- rep('Equal', length(data_filt$ratio_norm_NGFRtoEGFR))
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR > 1.3] <- 'NGFR-high' # NGFR 5% higher than EGFR
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR < 1.3] <- 'EGFR-high'# EGFR 5% higher than NGFR
ggplot(data_filt, aes(x = EGFR_mednorm, y = NGFR_mednorm, color = NGFR_EGFR_class)) + geom_point(size = .1)
# Plot the data on coordinates
for (i in unique(data_filt$plate)){
print(i)
for (j in unique(data_filt$well[data_filt$plate == i])){
print(j)
temp_df <- data_filt[data_filt$plate == i & data_filt$well == j,]
temp_df$adjsuted_X <- rep(NA, nrow(temp_df))
temp_df$adjsuted_Y <- rep(NA, nrow(temp_df))
#q1
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q1.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] + y_height[1]
#q2
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q2.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] + y_height[1]
#q3
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q3.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q3.tif']
#q4
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q4.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q4.tif']
print(ggplot(temp_df, aes(x = adjusted_X, y = adjusted_Y, color = NGFR_EGFR_class))+ geom_point(size = .1) + labs(title = paste(i,j)))
}
}
# Normalize expression to median per image
data_list <- list()
for (q in unique(data_filt$plate)){
print(q)
data_list[[q]] <- list()
for (z in unique(data_filt$well)){
print(z)
temp_df <- data_filt[data_filt$plate == q & data_filt$well == z,]
# Normalize expression to median
temp_df$NGFR_mednorm <- temp_df$Mean_647/median(temp_df$Mean_647)
temp_df$EGFR_mednorm <- temp_df$Mean_488/median(temp_df$Mean_488)
data_list[[q]][[z]] <- temp_df
}
}
data_unlisted <- unlist(data_list, recursive = FALSE)
data_filt <- do.call("rbind", data_unlisted)
# Calculate the ratio of normalized NGFR ot EGFR expression
data_filt$ratio_norm_NGFRtoEGFR <- data_filt$NGFR_mednorm/data_filt$EGFR_mednorm
hist(data_filt$ratio_norm_NGFRtoEGFR,51)
hist(log2(data_filt$ratio_norm_NGFRtoEGFR),51)
data_filt$NGFR_EGFR_class <- rep('Equal', length(data_filt$ratio_norm_NGFRtoEGFR))
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR > 1.5] <- 'NGFR-high' # NGFR 5% higher than EGFR
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR < .5] <- 'EGFR-high'# EGFR 5% higher than NGFR
ggplot(data_filt, aes(x = EGFR_mednorm, y = NGFR_mednorm, color = NGFR_EGFR_class)) + geom_point(size = .1)
# Plot the data on coordinates
for (i in unique(data_filt$plate)){
print(i)
for (j in unique(data_filt$well[data_filt$plate == i])){
print(j)
temp_df <- data_filt[data_filt$plate == i & data_filt$well == j,]
temp_df$adjsuted_X <- rep(NA, nrow(temp_df))
temp_df$adjsuted_Y <- rep(NA, nrow(temp_df))
#q1
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q1.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] + y_height[1]
#q2
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q2.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] + y_height[1]
#q3
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q3.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q3.tif']
#q4
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q4.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q4.tif']
print(ggplot(temp_df, aes(x = adjusted_X, y = adjusted_Y, color = NGFR_EGFR_class))+ geom_point(size = .1) + labs(title = paste(i,j)))
}
}
# Normalize expression to median per image
data_list <- list()
for (q in unique(data_filt$plate)){
print(q)
data_list[[q]] <- list()
for (z in unique(data_filt$well)){
print(z)
temp_df <- data_filt[data_filt$plate == q & data_filt$well == z,]
# Normalize expression to median
temp_df$NGFR_mednorm <- temp_df$Mean_647/median(temp_df$Mean_647)
temp_df$EGFR_mednorm <- temp_df$Mean_488/median(temp_df$Mean_488)
data_list[[q]][[z]] <- temp_df
}
}
data_unlisted <- unlist(data_list, recursive = FALSE)
data_filt <- do.call("rbind", data_unlisted)
# Calculate the ratio of normalized NGFR ot EGFR expression
data_filt$ratio_norm_NGFRtoEGFR <- data_filt$NGFR_mednorm/data_filt$EGFR_mednorm
hist(data_filt$ratio_norm_NGFRtoEGFR,51)
hist(log2(data_filt$ratio_norm_NGFRtoEGFR),51)
data_filt$NGFR_EGFR_class <- rep('Equal', length(data_filt$ratio_norm_NGFRtoEGFR))
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR > 1.5] <- 'NGFR-high' # NGFR 5% higher than EGFR
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR < .5] <- 'EGFR-high'# EGFR 5% higher than NGFR
ggplot(data_filt, aes(x = EGFR_mednorm, y = NGFR_mednorm, color = NGFR_EGFR_class)) + geom_point(size = .1)
# Plot the data on coordinates
for (i in unique(data_filt$plate)){
print(i)
for (j in unique(data_filt$well[data_filt$plate == i])){
print(j)
temp_df <- data_filt[data_filt$plate == i & data_filt$well == j,]
temp_df$adjsuted_X <- rep(NA, nrow(temp_df))
temp_df$adjsuted_Y <- rep(NA, nrow(temp_df))
#q1
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q1.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] + y_height[1]
#q2
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q2.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] + y_height[1]
#q3
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q3.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q3.tif']
#q4
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q4.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q4.tif']
print(ggplot(temp_df, aes(x = adjusted_X, y = adjusted_Y, color = NGFR_EGFR_class))+ geom_point(size = .05) + labs(title = paste(i,j)))
}
}
# Normalize expression to median per image
data_list <- list()
for (q in unique(data_filt$plate)){
print(q)
data_list[[q]] <- list()
for (z in unique(data_filt$well)){
print(z)
temp_df <- data_filt[data_filt$plate == q & data_filt$well == z,]
# Normalize expression to median
temp_df$NGFR_mednorm <- temp_df$Mean_647/median(temp_df$Mean_647)
temp_df$EGFR_mednorm <- temp_df$Mean_488/median(temp_df$Mean_488)
data_list[[q]][[z]] <- temp_df
}
}
data_unlisted <- unlist(data_list, recursive = FALSE)
data_filt <- do.call("rbind", data_unlisted)
# Calculate the ratio of normalized NGFR ot EGFR expression
data_filt$ratio_norm_NGFRtoEGFR <- data_filt$NGFR_mednorm/data_filt$EGFR_mednorm
hist(data_filt$ratio_norm_NGFRtoEGFR,51)
hist(log2(data_filt$ratio_norm_NGFRtoEGFR),51)
data_filt$NGFR_EGFR_class <- rep('Equal', length(data_filt$ratio_norm_NGFRtoEGFR))
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR > 1.5] <- 'NGFR-high' # NGFR 5% higher than EGFR
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR < .5] <- 'EGFR-high'# EGFR 5% higher than NGFR
ggplot(data_filt, aes(x = EGFR_mednorm, y = NGFR_mednorm, color = NGFR_EGFR_class)) + geom_point(size = .1)
# Plot the data on coordinates
for (i in unique(data_filt$plate)){
print(i)
for (j in unique(data_filt$well[data_filt$plate == i])){
print(j)
temp_df <- data_filt[data_filt$plate == i & data_filt$well == j,]
temp_df$adjsuted_X <- rep(NA, nrow(temp_df))
temp_df$adjsuted_Y <- rep(NA, nrow(temp_df))
#q1
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q1.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] + y_height[1]
#q2
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q2.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] + y_height[1]
#q3
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q3.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q3.tif']
#q4
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q4.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q4.tif']
print(ggplot(temp_df, aes(x = adjusted_X, y = adjusted_Y, color = NGFR_EGFR_class))+ geom_point(size = .005) + labs(title = paste(i,j)))
}
}
# Normalize expression to median per image
data_list <- list()
for (q in unique(data_filt$plate)){
print(q)
data_list[[q]] <- list()
for (z in unique(data_filt$well)){
print(z)
temp_df <- data_filt[data_filt$plate == q & data_filt$well == z,]
# Normalize expression to median
temp_df$NGFR_mednorm <- temp_df$Mean_647/median(temp_df$Mean_647)
temp_df$EGFR_mednorm <- temp_df$Mean_488/median(temp_df$Mean_488)
data_list[[q]][[z]] <- temp_df
}
}
data_unlisted <- unlist(data_list, recursive = FALSE)
data_filt <- do.call("rbind", data_unlisted)
# Calculate the ratio of normalized NGFR ot EGFR expression
data_filt$ratio_norm_NGFRtoEGFR <- data_filt$NGFR_mednorm/data_filt$EGFR_mednorm
hist(data_filt$ratio_norm_NGFRtoEGFR,51)
hist(log2(data_filt$ratio_norm_NGFRtoEGFR),51)
data_filt$NGFR_EGFR_class <- rep('Equal', length(data_filt$ratio_norm_NGFRtoEGFR))
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR > 1.5] <- 'NGFR-high' # NGFR 5% higher than EGFR
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR < .5] <- 'EGFR-high'# EGFR 5% higher than NGFR
ggplot(data_filt, aes(x = EGFR_mednorm, y = NGFR_mednorm, color = NGFR_EGFR_class)) + geom_point(size = .1)
# Plot the data on coordinates
for (i in unique(data_filt$plate)){
print(i)
for (j in unique(data_filt$well[data_filt$plate == i])){
print(j)
temp_df <- data_filt[data_filt$plate == i & data_filt$well == j,]
temp_df$adjsuted_X <- rep(NA, nrow(temp_df))
temp_df$adjsuted_Y <- rep(NA, nrow(temp_df))
#q1
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q1.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] + y_height[1]
#q2
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q2.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] + y_height[1]
#q3
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q3.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q3.tif']
#q4
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q4.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q4.tif']
print(ggplot(temp_df, aes(x = adjusted_X, y = adjusted_Y, color = NGFR_EGFR_class))+ geom_point(size = .00005) + labs(title = paste(i,j)))
}
}
# Normalize expression to median per image
data_list <- list()
for (q in unique(data_filt$plate)){
print(q)
data_list[[q]] <- list()
for (z in unique(data_filt$well)){
print(z)
temp_df <- data_filt[data_filt$plate == q & data_filt$well == z,]
# Normalize expression to median
temp_df$NGFR_mednorm <- temp_df$Mean_647/median(temp_df$Mean_647)
temp_df$EGFR_mednorm <- temp_df$Mean_488/median(temp_df$Mean_488)
data_list[[q]][[z]] <- temp_df
}
}
data_unlisted <- unlist(data_list, recursive = FALSE)
data_filt <- do.call("rbind", data_unlisted)
# Calculate the ratio of normalized NGFR ot EGFR expression
data_filt$ratio_norm_NGFRtoEGFR <- data_filt$NGFR_mednorm/data_filt$EGFR_mednorm
hist(data_filt$ratio_norm_NGFRtoEGFR,51)
hist(log2(data_filt$ratio_norm_NGFRtoEGFR),51)
data_filt$NGFR_EGFR_class <- rep('Equal', length(data_filt$ratio_norm_NGFRtoEGFR))
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR > 2] <- 'NGFR-high' # NGFR 5% higher than EGFR
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR < .2] <- 'EGFR-high'# EGFR 5% higher than NGFR
ggplot(data_filt, aes(x = EGFR_mednorm, y = NGFR_mednorm, color = NGFR_EGFR_class)) + geom_point(size = .1)
# Plot the data on coordinates
for (i in unique(data_filt$plate)){
print(i)
for (j in unique(data_filt$well[data_filt$plate == i])){
print(j)
temp_df <- data_filt[data_filt$plate == i & data_filt$well == j,]
temp_df$adjsuted_X <- rep(NA, nrow(temp_df))
temp_df$adjsuted_Y <- rep(NA, nrow(temp_df))
#q1
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q1.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] + y_height[1]
#q2
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q2.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] + y_height[1]
#q3
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q3.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q3.tif']
#q4
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q4.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q4.tif']
print(ggplot(temp_df, aes(x = adjusted_X, y = adjusted_Y, color = NGFR_EGFR_class))+ geom_point(size = .0000005) + labs(title = paste(i,j)))
}
}
# Normalize expression to median per image
data_list <- list()
for (q in unique(data_filt$plate)){
print(q)
data_list[[q]] <- list()
for (z in unique(data_filt$well)){
print(z)
temp_df <- data_filt[data_filt$plate == q & data_filt$well == z,]
# Normalize expression to median
temp_df$NGFR_mednorm <- temp_df$Mean_647/median(temp_df$Mean_647)
temp_df$EGFR_mednorm <- temp_df$Mean_488/median(temp_df$Mean_488)
data_list[[q]][[z]] <- temp_df
}
}
data_unlisted <- unlist(data_list, recursive = FALSE)
data_filt <- do.call("rbind", data_unlisted)
# Calculate the ratio of normalized NGFR ot EGFR expression
data_filt$ratio_norm_NGFRtoEGFR <- data_filt$NGFR_mednorm/data_filt$EGFR_mednorm
hist(data_filt$ratio_norm_NGFRtoEGFR,51)
hist(log2(data_filt$ratio_norm_NGFRtoEGFR),51)
data_filt$NGFR_EGFR_class <- rep('Equal', length(data_filt$ratio_norm_NGFRtoEGFR))
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR > 2] <- 'NGFR-high' # NGFR 5% higher than EGFR
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR < .02] <- 'EGFR-high'# EGFR 5% higher than NGFR
ggplot(data_filt, aes(x = EGFR_mednorm, y = NGFR_mednorm, color = NGFR_EGFR_class)) + geom_point(size = .1)
# Plot the data on coordinates
for (i in unique(data_filt$plate)){
print(i)
for (j in unique(data_filt$well[data_filt$plate == i])){
print(j)
temp_df <- data_filt[data_filt$plate == i & data_filt$well == j,]
temp_df$adjsuted_X <- rep(NA, nrow(temp_df))
temp_df$adjsuted_Y <- rep(NA, nrow(temp_df))
#q1
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q1.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] + y_height[1]
#q2
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q2.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] + y_height[1]
#q3
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q3.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q3.tif']
#q4
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q4.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q4.tif']
print(ggplot(temp_df, aes(x = adjusted_X, y = adjusted_Y, color = NGFR_EGFR_class))+ geom_point(size = .0000005) + labs(title = paste(i,j)))
}
}
# Normalize expression to median per image
data_list <- list()
for (q in unique(data_filt$plate)){
print(q)
data_list[[q]] <- list()
for (z in unique(data_filt$well)){
print(z)
temp_df <- data_filt[data_filt$plate == q & data_filt$well == z,]
# Normalize expression to median
temp_df$NGFR_mednorm <- temp_df$Mean_647/median(temp_df$Mean_647)
temp_df$EGFR_mednorm <- temp_df$Mean_488/median(temp_df$Mean_488)
data_list[[q]][[z]] <- temp_df
}
}
data_unlisted <- unlist(data_list, recursive = FALSE)
data_filt <- do.call("rbind", data_unlisted)
# Calculate the ratio of normalized NGFR ot EGFR expression
data_filt$ratio_norm_NGFRtoEGFR <- data_filt$NGFR_mednorm/data_filt$EGFR_mednorm
hist(data_filt$ratio_norm_NGFRtoEGFR,51)
hist(log2(data_filt$ratio_norm_NGFRtoEGFR),51)
data_filt$NGFR_EGFR_class <- rep('Equal', length(data_filt$ratio_norm_NGFRtoEGFR))
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR > 2] <- 'NGFR-high' # NGFR 5% higher than EGFR
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR < .1] <- 'EGFR-high'# EGFR 5% higher than NGFR
ggplot(data_filt, aes(x = EGFR_mednorm, y = NGFR_mednorm, color = NGFR_EGFR_class)) + geom_point(size = .1)
# Plot the data on coordinates
for (i in unique(data_filt$plate)){
print(i)
for (j in unique(data_filt$well[data_filt$plate == i])){
print(j)
temp_df <- data_filt[data_filt$plate == i & data_filt$well == j,]
temp_df$adjsuted_X <- rep(NA, nrow(temp_df))
temp_df$adjsuted_Y <- rep(NA, nrow(temp_df))
#q1
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q1.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] + y_height[1]
#q2
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q2.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] + y_height[1]
#q3
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q3.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q3.tif']
#q4
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q4.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q4.tif']
print(ggplot(temp_df, aes(x = adjusted_X, y = adjusted_Y, color = NGFR_EGFR_class))+ geom_point(size = .0000005) + labs(title = paste(i,j)))
}
}
# Normalize expression to median per image
data_list <- list()
for (q in unique(data_filt$plate)){
print(q)
data_list[[q]] <- list()
for (z in unique(data_filt$well)){
print(z)
temp_df <- data_filt[data_filt$plate == q & data_filt$well == z,]
# Normalize expression to median
temp_df$NGFR_mednorm <- temp_df$Mean_647/median(temp_df$Mean_647)
temp_df$EGFR_mednorm <- temp_df$Mean_488/median(temp_df$Mean_488)
data_list[[q]][[z]] <- temp_df
}
}
data_unlisted <- unlist(data_list, recursive = FALSE)
data_filt <- do.call("rbind", data_unlisted)
# Calculate the ratio of normalized NGFR ot EGFR expression
data_filt$ratio_norm_NGFRtoEGFR <- data_filt$NGFR_mednorm/data_filt$EGFR_mednorm
hist(data_filt$ratio_norm_NGFRtoEGFR,51)
hist(log2(data_filt$ratio_norm_NGFRtoEGFR),51)
data_filt$NGFR_EGFR_class <- rep('Equal', length(data_filt$ratio_norm_NGFRtoEGFR))
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR > 1.3] <- 'NGFR-high' # NGFR 5% higher than EGFR
data_filt$NGFR_EGFR_class[data_filt$ratio_norm_NGFRtoEGFR < 1.3] <- 'EGFR-high'# EGFR 5% higher than NGFR
ggplot(data_filt, aes(x = EGFR_mednorm, y = NGFR_mednorm, color = NGFR_EGFR_class)) + geom_point(size = .1)
# Plot the data on coordinates
for (i in unique(data_filt$plate)){
print(i)
for (j in unique(data_filt$well[data_filt$plate == i])){
print(j)
temp_df <- data_filt[data_filt$plate == i & data_filt$well == j,]
temp_df$adjsuted_X <- rep(NA, nrow(temp_df))
temp_df$adjsuted_Y <- rep(NA, nrow(temp_df))
#q1
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q1.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q1.tif'] + y_height[1]
#q2
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q2.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q2.tif'] + y_height[1]
#q3
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q3.tif']
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q3.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q3.tif']
#q4
temp_df$adjusted_X[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_X[temp_df$Nuc_file == 'DAPI_q4.tif'] + x_width
temp_df$adjusted_Y[temp_df$Nuc_file == 'DAPI_q4.tif'] <- temp_df$Coords_Y[temp_df$Nuc_file == 'DAPI_q4.tif']
print(ggplot(temp_df, aes(x = adjusted_X, y = adjusted_Y, color = NGFR_EGFR_class))+ geom_point(size = .0000005) + labs(title = paste(i,j)))
}
}
